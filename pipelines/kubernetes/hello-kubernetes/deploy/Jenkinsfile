@Library('global-shared-library') _

pipeline {

  agent none

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
    ansiColor('xterm')
  }

  environment {
    KUBECONFIG = '/home/toolbox/.kube/config'
    DIRECTORY = 'pipelines/kubernetes/hello-kubernetes/deploy'
    REGISTRY = 'http://registry.internal:5000'
    DOCKER_IMAGE = 'registry.internal:5000/tool-box:latest'
    ARGS = '-u toolbox --mount type=bind,src=/var/lib/jenkins/.kube,dst=/home/toolbox/.kube,readonly'
  }

  stages {

    stage('Lint Helm chart') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
          args env.ARGS
        }
      }
      steps {
        dir(env.DIRECTORY) {
          sh 'make lint'
        }
      }
    }

    stage('Checkov scan') {
      agent {
        docker {
          image 'bridgecrew/checkov:latest'
          args "--entrypoint='' --mount type=bind,src=/var/lib/jenkins/.kube,dst=/home/toolbox/.kube,readonly"
        }
      }
      steps {
        sh """
          export HELM_NAMESPACE='not-default'
          checkov -d \$DIRECTORY --skip-framework kubernetes \
          --config-file .checkov.yaml --var-file \$DIRECTORY/values.yaml \
          -o cli -o junitxml --output-file-path console,results.xml --soft-fail --quiet
        """
        junit skipPublishingChecks: true, testResults: 'results.xml'
      }
    }

    stage('Validate Helm chart') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
          args env.ARGS
        }
      }
      steps {
        dir(env.DIRECTORY) {
          sh 'make validate_k8s'
        }
      }
    }

    stage('Build image') {
      agent any
      environment {
        PATH = "/usr/local/bin:$PATH"
      }
      steps {
        dir(env.DIRECTORY + '/dockerfile') {
          withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKERHUB_TOKEN', usernameVariable: 'DOCKERHUB_USERNAME')]) {
            sh 'make login build tag'
          }
        }
      }
    }

    stage('Scan image') {
      agent any
      environment {
        PATH ="/usr/local/bin:$PATH"
      }
      steps {
        dir(env.DIRECTORY + '/dockerfile') {
          sh 'make scan'
          recordIssues(
            tools: [trivy(pattern: 'results.json', reportEncoding: 'UTF-8')]
          )
        }
      }
    }

    stage('Push image') {
      agent any
      environment {
        PATH ="/usr/local/bin:$PATH"
      }
      steps {
        dir(env.DIRECTORY + '/dockerfile') {
          withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKERHUB_TOKEN', usernameVariable: 'DOCKERHUB_USERNAME')]) {
            sh 'make login push clean'
          }
        }
      }
    }

    stage('Generate release notes') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
          args env.ARGS
        }
      }
      steps {
        dir(env.DIRECTORY) {
          sh 'make release_notes'
        }
      }
      post {
        success {
          archiveArtifacts artifacts: "${env.DIRECTORY}/release_notes.yaml", fingerprint: true, followSymlinks: false
        }
      }
    }

    stage('Deploy hello-kubernetes app') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
          args env.ARGS
        }
      }
      steps {
        lock('kubernetes/hello-kubernetes') {
          dir(env.DIRECTORY) {
            sh 'make validate_k8s apply'
          }
        }
      }
    }

    stage('Test app') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
          args env.ARGS
        }
      }
      steps {
        dir(env.DIRECTORY) {
          sh './test.sh'
        }
      }
    }

  }

}
