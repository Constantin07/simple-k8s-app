name: Generate version

on:
  pull_request:
    branches: [ master ]

  push:
    branches:
      - master

permissions: read-all

jobs:
  version:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          # fetch all history for all tags and branches
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          TAG_RAW="$(git describe --tags --abbrev=0 || echo "0.0.0")"

          # Strip the 'v' prefix
          TAG="${TAG_RAW#v}"

          # Parse components
          MAJOR=$(echo "$TAG" | cut -d. -f1)
          MINOR=$(echo "$TAG" | cut -d. -f2)
          PATCH=$(echo "$TAG" | cut -d. -f3)

          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "MAJOR=$MAJOR" >> $GITHUB_OUTPUT
          echo "MINOR=$MINOR" >> $GITHUB_OUTPUT
          echo "PATCH=$PATCH" >> $GITHUB_OUTPUT

      - name: Get PR labels
        id: get_labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels.map(label => label.name);
            console.log("Labels: ", labels);
            core.setOutput("labels", labels.join(','));

      - name: Generate new SemVer string
        id: version
        env:
          PR_LABELS: "${{ steps.get_labels.outputs.labels }}"
        run: |
          # Bump logic
          IFS=',' read -ra LABELS <<< "$PR_LABELS"

          # default fallback
          BUMP_TYPE="patch"

          for label in "${LABELS[@]}"; do
            case "$label" in
              *major*) BUMP_TYPE="major"; break ;;
              *minor*) BUMP_TYPE="minor"; break ;;
              *patch*) BUMP_TYPE="patch"; break ;;
            esac
          done

          case "$BUMP_TYPE" in
            major)
                MAJOR=$((${{ steps.get_tag.outputs.MAJOR }} + 1))
                MINOR=0
                PATCH=0
                ;;
            minor)
                MAJOR=${{ steps.get_tag.outputs.MAJOR }}
                MINOR=$((${{ steps.get_tag.outputs.MINOR }} + 1))
                PATCH=0
                ;;
            patch|*)
                MAJOR=${{ steps.get_tag.outputs.MAJOR }}
                MINOR=${{ steps.get_tag.outputs.MINOR }}
                PATCH=$((${{ steps.get_tag.outputs.PATCH }} + 1))
                ;;
            esac

          NEW_TAG="${MAJOR}.${MINOR}.${PATCH}"
          COMMITS_SINCE_TAG=$(git rev-list ${{ steps.get_tag.outputs.TAG }}..HEAD --count)
          SHORT_SHA=$(git rev-parse --short HEAD)

          # Append PR if not on master branch
          if [[ $GITHUB_REF_NAME != "master" && $GITHUB_REF_NAME != "main" && "${{ github.event.pull_request.number }}" != "" ]]; then
            VERSION="${NEW_TAG}-${COMMITS_SINCE_TAG}.pr-${{ github.event.pull_request.number }}"
          else
            VERSION="${NEW_TAG}"
          fi

          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Show version
        run: |
          echo "Generated version: ${{ steps.version.outputs.VERSION }}"
          echo "::notice title=Version::Version is ${{ steps.version.outputs.VERSION }}"
